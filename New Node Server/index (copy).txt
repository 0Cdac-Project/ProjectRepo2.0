const express = require('express');
const config = require('config');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const mysql = require('mysql2');

const loginApp = require('./routes/login');
const pDashApp = require('./routes/pDashApp');

const PORT = config.get("PORT");
const key  = config.get("jwtkey");

const connectionDetails = {
    host : config.get("host"),
    database : config.get("database"),
    user : config.get("user"),
    password : config.get("password")
}

const app = express();

app.use(cors());
app.use(express.json());

app.use((request, response, next)=>{
    if(!request.url.includes("login"))
    {
        if(request.headers.authorization!==undefined ||
            request.header.authorization!=null)
            {
                console.log("Authorization header received is " + 
                            request.headers.authorization);
                
              
                var headerContents = request.headers.authorization.split(".")

                var tokenReceived = headerContents[1];

                console.log(tokenReceived);

                var payloadDecodedFromToken = jwt.verify(tokenReceived, key)

                const connection = mysql.createConnection(connectionDetails);    
                
                var statement = `select password from userlogs where username = ${payloadDecodedFromToken.username} and curr_status = "Logged In";`;
                
                connection.query(statement, (error, result)=>{
                    if(error == null){
                        if(result == null){
                            var responseMessage = {
                                message : "Session Logged Out"
                            }
                            response.write(JSON.stringify(responseMessage));
                            response.end();
                        }else{
                            next();
                        }
                    }
                    else{
                        response.setHeader("Content-type", "application/json");
                        response.write(JSON.stringify(error));
                        connection.end();
                        response.end();
                    }
                })
            }
        else
        {
            var responseMessage = {
                                    message: "Need Token!"
                                  }

            response.write(JSON.stringify(responseMessage));
            response.end();
        }
    }
    else
    {
        next();
    }
})

app.use("/login",loginApp);
app.use("/patientDashBoard", pDashApp);

app.listen(PORT, ()=>{console.log(`server started listening at ${PORT}`)})